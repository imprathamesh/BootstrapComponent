@typeparam TItem
@using BootstrapComponents.Grid
@inject NavigationManager NavigationManager

@if (ShowTableMenu)
{
    <Row Class="g-3 mb-2 d-print-none">
        <Column Size="ColumnSize.Two">
            @SearchTemplate
        </Column>
        <Column Size="ColumnSize.Ten" Class="text-end">@ExportTemplate</Column>
    </Row>
}
@if (Items == null)
{
    <TableSkeletonLoading />
}
else if (Items.Count == 0)
{
    if (ShowMessage)
    {
        <div class="d-flex justify-content-center">
            <div class="d-flex flex-column gap-4">
                <img src="img/no-data.svg" alt="no-data" class="img-fluid" />
                <p class="text-center m-0"><strong>Sorry!</strong> No Data Available.</p>
                <div class="text-center">
                    <a href="@(!string.IsNullOrEmpty(CreateNewLink) ? CreateNewLink : $"/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}/create")" class="btn btn-primary @ButtonVisible"><i class="bi bi-plus me-2"></i>New</a>
                </div>
            </div>
        </div>
    }
}
else
{
    @if (MobileView)
    {
        <div class="table-responsive d-none d-sm-block">
            <table class="table table-hover" ondragover="@ondragOver">
                <thead>
                    <tr>
                        @TableHeadTemplate
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @TableBodyTemplate
                </tbody>
                @if (ShowFooter)
                {
                    <tfoot class="table-group-divider">
                        @TableFooterTemplate
                    </tfoot>
                }
            </table>
        </div>
        <div class="d-block d-sm-none mb-3">
            @ListTemplate
        </div>
    }
    else
    {
        <div class="table-responsive" id="@("table"+ @ID)" @attributes="AdditionalAttributes">
            <table class="table @Hover() @Striped() @Background()" ondragover="@ondragOver" id="@ID">
                <thead>
                    <tr>
                        @TableHeadTemplate
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @TableBodyTemplate
                </tbody>
                @if (ShowFooter)
                {
                    <tfoot class="table-group-divider">
                        @TableFooterTemplate
                    </tfoot>
                }
            </table>
        </div>
    }
}
@if (ShowPagination)
{
    <Row>
        <Column Size="ColumnSize.Six">@CountTemplate</Column>
        <Column Size="ColumnSize.Six" Class="text-end">@PaginationTemplate</Column>
    </Row>
}
@code {
    [Parameter] public IReadOnlyList<TItem>? Items { get; set; }

    [Parameter]
    public string CreateNewLink { get; set; }
    [Parameter] public string? ButtonVisible { get; set; }
    [Parameter] public bool ShowMessage { get; set; } = true;
    [Parameter] public bool ShowTableMenu { get; set; } = true;
    [Parameter] public bool ShowFooter { get; set; } = false;
    [Parameter] public string? ondragOver { get; set; }
    [Parameter] public string? ID { get; set; }
    [Parameter] public bool IsHover { get; set; } = true;
    [Parameter] public bool IsStriped { get; set; } = true;
    [Parameter] public bool IsBackground { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public bool MobileView { get; set; } = true;
    [Parameter] public RenderFragment? NullTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public RenderFragment? ExportTemplate { get; set; }
    [Parameter] public RenderFragment? SearchTemplate { get; set; }
    [Parameter] public RenderFragment? PaginationTemplate { get; set; }
    [Parameter] public RenderFragment? CountTemplate { get; set; }
    [Parameter] public RenderFragment? TableHeadTemplate { get; set; }
    [Parameter] public RenderFragment? TableBodyTemplate { get; set; }
    [Parameter] public RenderFragment? TableFooterTemplate { get; set; }
    [Parameter] public RenderFragment ListTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? WithIndividualElementTemplate { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    string Hover()
    {
        if (IsHover)
        {
            return "table-hover";
        }
        return String.Empty;
    }
    string Striped()
    {
        if (IsStriped)
        {
            return "table-striped";
        }
        return String.Empty;
    }
    string Background()
    {
        if (IsBackground)
        {
            return "table-bg";
        }
        return String.Empty;
    }
}

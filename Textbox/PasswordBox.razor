@using System.Text.RegularExpressions
<div class="form-floating mb-3">
    <input id="@("txt"+Label)" @oninput="OnTextChanged" class="form-control mb-2" value="@text" type="password" placeholder="@SetPlaceHolder()" />
    <label for="@("txt"+Label)">@Label</label>
</div>
@if (ShowStrength)
{
    <div class="progress" style="height: 4px;">
        @if (ValidatePassword(text) == "weak")
        {
            <div class="progress-bar bg-danger" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
        }
        else if (ValidatePassword(text) == "medium")
        {
            <div class="progress-bar bg-warning" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
        }
        else if (ValidatePassword(text) == "strong")
        {
            <div class="progress-bar bg-success" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
        }
        else
        {

        }
    </div>
}
@code
{
    private string? text;
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public decimal MaxValue { get; set; }
    [Parameter] public EventCallback<string> TextChanged { get; set; }
    [Parameter] public string? Text { get; set; }

    [Parameter] public bool ShowStrength { get; set; } = false;
    private async Task OnTextChanged(ChangeEventArgs e)
    {
        text = e?.Value?.ToString();
        await TextChanged.InvokeAsync(text);
    }

    string SetPlaceHolder()
    {
        if (string.IsNullOrEmpty(Placeholder))
            return Placeholder = Label;
        return Placeholder;
    }
    string ValidatePassword(string input)
    {
        int level = 0;
        string strength = string.Empty;
        if (!string.IsNullOrWhiteSpace(input))
        {
            var hasNumber = new Regex(@"[0-9]+");
            var hasUpperChar = new Regex(@"[A-Z]+");
            var hasLowerChar = new Regex(@"[a-z]+");
            var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
            if (hasLowerChar.IsMatch(input) && hasUpperChar.IsMatch(input))
            {
                level = 3;
            }
            if (hasNumber.IsMatch(input) && hasSymbols.IsMatch(input))
            {
                level = 4;
            }
            if (hasNumber.IsMatch(input) && hasSymbols.IsMatch(input) && hasLowerChar.IsMatch(input) && hasUpperChar.IsMatch(input) && input.Length > 8)
            {
                level = 5;
            }

            if (level == 3)
            {
                strength = "weak";
            }
            if (level == 4)
            {
                strength = "medium";
            }
            if (level == 5)
            {
                strength = "strong";
            }
        }
        return strength;
    }
}

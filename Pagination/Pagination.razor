
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-end">
        @foreach (var link in links)
        {
            <PaginationItem @onclick="@(() => SelectedPageInternal(link))" Class="@(CheckItem(link))" LinkTitle="@link.Text" Icon="@link.Icon"></PaginationItem>
        }
    </ul>
</nav>


@code {
    /// <summary>
    /// Current Page
    /// </summary>
    [Parameter] public int CurrentPage { get; set; } = 1;
    /// <summary>
    /// Number of pages
    /// </summary>
    [Parameter] public int PaginationLength { get; set; }
    /// <summary>
    /// Show Number of next pages on selected page
    /// </summary>
    [Parameter] public int Radius { get; set; } = 1;
    /// <summary>
    /// Selected page
    /// </summary>
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> links = new();
    protected override void OnParametersSet()
    {
        LoadPages();
    }
    string CheckItem(LinkModel link)
    {
        if (!link.Enabled)
        {
            return "disabled";
        }
        else if (link.Active)
        {
            if (link.Text == "1")
            {
                return "active me-1";
            }
            else if (link.Text == PaginationLength.ToString())
            {
                return "active ms-1";
            }
            return "active";
        }
        else
        {
            if (link.Text == "1")
            {
                return "me-1";
            }
            else if (link.Text == PaginationLength.ToString())
            {
                return "ms-1";
            }
            return string.Empty;
        }
    }
    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, string.Empty, "bi bi-chevron-left"));
        links.Add(new LinkModel(1) { Active = CurrentPage == 1 });

        for (int i = 2; i < PaginationLength; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        links.Add(new LinkModel(PaginationLength) { Active = CurrentPage == PaginationLength });
        var isNextPageLinkEnabled = CurrentPage != PaginationLength;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, string.Empty, "bi bi-chevron-right"));
    }

    class LinkModel
    {
        public LinkModel(int page)
            : this(page, true) { }

        public LinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString(), string.Empty)
        { }

        public LinkModel(int page, bool enabled, string text, string icon)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
            Icon = icon;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
        public string Icon { get; set; } = string.Empty;
    }
}
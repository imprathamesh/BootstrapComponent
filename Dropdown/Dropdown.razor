
<div class="dropdown @Class">
    <button class="btn btn-@Color.Name btn-@Size.Name dropdown-toggle dropdown-menu-@Direction.Name" type="button" id="@ID" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="@AutoClose" @attributes="@AdditionalAttributes">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <i class="las la-@Icon la-fw @IconClass"></i>
        }
        @Title
    </button>

    <ul class="dropdown-menu" aria-labelledby="@ID">
        @ChildContent
    </ul>
</div>
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? IconClass { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? ID { get; set; }
    [Parameter] public Color Color { get; set; } = Color.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public Direction Direction { get; set; } = Direction.Start;
    [Parameter] public AutoClose AutoClose { get; set; } = AutoClose.True;
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
}
